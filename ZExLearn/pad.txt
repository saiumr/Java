java内部类：
java内部类详解：https://www.cnblogs.com/dolphin0520/p/3811445.html
在Java中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。
广泛意义上的内部类一般来说包括这四种：成员内部类、局部内部类、匿名内部类和静态内部类。


成员内部类是最普通的内部类，它的定义为位于另一个类的内部

局部内部类是定义在一个方法或者一个作用域里面的类，
它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。
局部内部类就像是方法里面的一个局部变量一样，是不能有public、protected、private以及static修饰符的。

匿名内部类：https://www.cnblogs.com/wuhenzhidu/p/anonymous.html
内嵌类的属性屏蔽和
匿名内部类的属性屏蔽

匿名内部类应该是平时我们编写代码时用得最多的，
在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护。
下面这段代码是一段Android事件监听代码：
scan_bt.setOnClickListener(new OnClickListener() {
             
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                 
            }
        });
         
        history_bt.setOnClickListener(new OnClickListener() {
             
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                 
            }
        });
这段代码为两个按钮设置监听器，这里面就使用了匿名内部类。这段代码中的：
new OnClickListener() {
             
            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                 
            }
        }
就是匿名内部类的使用。
代码中需要给按钮设置监听器对象，
使用匿名内部类能够在实现父类或者接口中的方法情况下同时产生一个相应的对象，
但是前提是这个父类或者接口必须先存在才能这样使用。
匿名内部类是唯一一种没有构造器的类。

静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。
静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似，
并且它不能使用外部类的非static成员变量或者方法